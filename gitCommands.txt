******   How to compare two files in BASH:

diff -u first_file.java secondfile.java


******   How to see all versions of git file

*** when inside folder enter

git log


*** this shows stats of what files changed in each commit

git log --stat


******   Reviewing 2 versions of a file

git diff (paste the two ID #'s for each file here)


******   Cloning a Repository

To clone a repository, run git clone followed by a space and the repository URL.


********    Exiting git log

To stop viewing git log output, press q (which stands for quit).


**********      Getting Colored Output
To get colored diff output, run:

git config --global color.ui auto



**********    Copying and Pasting from the Command Line

To complete this quiz, you'll want to copy and paste some commit ids.


**********   Using git log and git diff

As a reminder, running git log will show a list of the recent commits with information about them, including commit IDs. Running git diff followed by two commit IDs will compare the two versions of the code in those commits.


********       Entering commit IDs

If it is easier, you may enter the first four or more characters of the commit ID rather than pasting the entire ID.


*********    Format of git checkout

The command Caroline types to checkout the "Revert controls" commit is:

git checkout <commit ID#>









*********   Git command review
Compare two commits, printing each line that is present in one commit but not the other.

git diff will do this. It takes two arguments - the two commit ids to compare.


Make a copy of an entire Git repository, including the history, onto your own computer.

git clone will do this. It takes one argument - the url of the repository to copy.


Temporarily reset all files in a directory to their state at the time of a specific commit.

git checkout will do this. It takes one argument - the commit ID to restore.


Show the commits made in this repository, starting with the most recent.

git log will do this. It doesn't take any arguments.








************************* LESSON 2 COMMANDS   **************************


git checkout master       *****  Do this before staging anything!!

  Right now, your HEAD should still be      'detached' from Lesson 1 when you checked out an old commit. To fix that, run the command git checkout master

git gc        Run Git's garbage collection.

git branch       Shows current branch and available branches.

ls -a     Shows all hidden files like .git

git init     Initializes a new git repository

git status     Shows which files changed since last commit

git add       Adds files to a repository - Or adding to the staging area.

git diff ID#1 ID#2      Diff on two commits

git diff                 Shows changes made (no ID's - not commits)
                       Compare between working directory and Staging area

git diff --staged        Shows the changes in the staged area


git reset --hard         Discards any changes in the working
                         directory or the staging area.


git commit            To commit wanted changes


git checkout master

  Right now, your HEAD should still be      'detached' from Lesson 1 when you checked out an old commit. To fix that, run the command git checkout master


****************************************************



git branch             Shows the current branch

git branch easy-mode        easy-mode is argument & makes branch of this name


git checkout easy-mode        Switches to easy-mode branch, changes will

                                    now be saved to this copy


git checkout <commit name>           Checkout a branch

Branch coins set up to track remote branch coins from origin.
Switched to a new branch 'coins'


The above message means that branch 'coins' is 'remote', which means someones has created this branch.


git log --graph              provides graph to visualize the branch

                             structure



git log --graph --oneline              this does the same as above but

                                       makes it easier to see the branches.



git log --graph --oneline <branch 1> <branch 2>       this tells git

what branches you want to visualize. changes made to <non-master> branch will appear with red lines next to them. Anything below this are before that branch was made and anything above are after that branch was merged to the master branch.




*********    Merging branches

When you use git to create a merge commit:
1. It stores info. about both of its parents.
2. It has access to all previous commits from the previous branches.

You can merge and then delete (rename) the branch thats being merged.



git merge <branch-1> <branch-2>        Creates a merge of the 2 branches.

You are then prompted to the text editor where there is already a default commit message referring to the merge.



git show <commit-ID#>        Shows the changes introduced in a commit

 compared to its parent, without knowing who the parent is.



 DELETE A BRANCH:

 git branch -d <branch-1>             Deletes a branch. Do this after

 the branch has been merged. This doesn't delete the commits on this branch, it will only delete the label. The commits are now accessible by the master branch.





**********   REVIEW  OF MERGING   ***********

1. make change to file and save it.
2. git diff     to see changes to the file.
3. git ass <file-1>     to add the changes.
4. git commit             to commit these changes.
